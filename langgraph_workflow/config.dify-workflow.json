{
	"workflow": {
		"entry_point": "user_input",
		"nodes": {
			"user_input": {
				"type": "input",
				"data": {
					"title": "测试用例生成输入",
					"fields": [
						{
							"name": "figma_yaml_file",
							"type": "file",
							"required": true,
							"description": "上传从 Figma API 或导出的 YAML 页面结构"
						},
						{
							"name": "viewpoints_file",
							"type": "file",
							"required": true,
							"description": "上传测试观点（viewpoints.yaml / JSON）"
						},
						{
							"name": "history_cases_files",
							"type": "files",
							"required": false,
							"description": "上传历史测试用例（可选，支持多文件，JSON/CSV/Excel）"
						},
						{
							"name": "manual_frame_selection",
							"type": "checkbox",
							"required": false,
							"default": false,
							"description": "手动选择需要测试的Frame（勾选后将显示Frame列表供选择）"
						},
						{
							"name": "enable_priority_evaluation",
							"type": "checkbox",
							"required": false,
							"default": true,
							"description": "启用测试观点优先级动态评估"
						},
						{
							"name": "enable_classification",
							"type": "checkbox",
							"required": false,
							"default": true,
							"description": "启用测试观点多维度分类"
						}
					]
				},
				"next": ["load_page", "process_viewpoints", "process_historical_cases"]
			},

			"load_page": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/load_page/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"figma_yaml": "{{figma_yaml_file.content}}",
						"extract_frames_only": "{{manual_frame_selection}}"
					}
				},
				"next": {
					"condition": "{{manual_frame_selection}}",
					"true": "select_frames",
					"false": "wait_for_parallel_input"
				}
			},

			"process_viewpoints": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/parse_viewpoints/",
					"headers": {
						"Content-Type": "multipart/form-data"
					},
					"body": {
						"viewpoints_file": "{{viewpoints_file}}",
						"enable_standardization": true,
						"enable_priority_evaluation": "{{enable_priority_evaluation}}",
						"enable_classification": "{{enable_classification}}"
					}
				},
				"next": "wait_for_parallel_input"
			},

			"select_frames": {
				"type": "form",
				"priority": "high",
				"data": {
					"title": "选择需要测试的Frame",
					"description": "请从下面的列表中选择需要包含在测试中的Frame，按页面分组显示",
					"fields": [
						{
							"name": "selected_frames",
							"type": "checkboxes",
							"options": "{{load_page.response.available_frames}}",
							"required": true,
							"description": "已找到 {{load_page.response.frames_count}} 个Frame，分布在 {{load_page.response.pages.length}} 个页面中"
						},
						{
							"name": "selection_info",
							"type": "display",
							"content": "选择包含交互元素的Frame可以获得更好的测试效果。交互元素包括按钮、输入框、链接等。"
						}
					]
				},
				"next": "process_selected_frames"
			},

			"process_selected_frames": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/process_selected_frames/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"figma_cache_id": "{{load_page.response.cache_id}}",
						"selected_frames": "{{selected_frames}}"
					}
				},
				"next": "wait_for_parallel_input"
			},

			"wait_for_parallel_input": {
				"type": "condition",
				"priority": "high",
				"data": {
					"conditions": [
						{
							"condition": "({{process_viewpoints.response}} != null) && (({{process_selected_frames.response}} != null) || ({{load_page.response}} != null && !{{manual_frame_selection}}))",
							"next": ["match_viewpoints", "route_infer"]
						}
					],
					"default": "wait_for_parallel_input"
				}
			},

			"process_historical_cases": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/parse_historical_cases/",
					"headers": {
						"Content-Type": "multipart/form-data"
					},
					"body": {
						"historical_cases_files": "{{history_cases_files}}",
						"enable_standardization": true
					}
				},
				"next": "extract_test_patterns"
			},

			"extract_test_patterns": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/extract_test_patterns/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"standardized_cases": "{{process_historical_cases.response.cases}}"
					}
				},
				"next": "wait_for_historical_parallel"
			},

			"wait_for_historical_parallel": {
				"type": "condition",
				"priority": "high",
				"data": {
					"conditions": [
						{
							"condition": "({{process_viewpoints.response}} != null) && (({{process_selected_frames.response}} != null) || ({{load_page.response}} != null && !{{manual_frame_selection}})) && ({{extract_test_patterns.response}} != null)",
							"next": ["match_viewpoints", "route_infer", "analyze_differences"]
						}
					],
					"default": "wait_for_historical_parallel"
				}
			},

			"analyze_differences": {
				"type": "http",
				"priority": "medium",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/analyze_differences/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"figma_cache_id": "{{#if process_selected_frames.response.cache_id}}{{process_selected_frames.response.cache_id}}{{else}}{{load_page.response.cache_id}}{{/if}}",
						"patterns_cache_id": "{{extract_test_patterns.response.cache_id}}"
					}
				},
				"next": "wait_for_testcases"
			},

			"wait_for_testcases": {
				"type": "condition",
				"priority": "high",
				"data": {
					"conditions": [
						{
							"condition": "{{generate_testcases.response}} != null && {{analyze_differences.response}} != null",
							"next": "evaluate_coverage"
						}
					],
					"default": "wait_for_testcases"
				}
			},

			"evaluate_coverage": {
				"type": "http",
				"priority": "medium",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/evaluate_coverage/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"viewpoints_cache_id": "{{process_viewpoints.response.cache_id}}",
						"difference_cache_id": "{{analyze_differences.response.cache_id}}",
						"patterns_cache_id": "{{extract_test_patterns.response.cache_id}}"
					}
				},
				"next": "wait_for_evaluation"
			},

			"wait_for_evaluation": {
				"type": "condition",
				"priority": "high",
				"data": {
					"conditions": [
						{
							"condition": "{{evaluate_coverage.response}} != null && {{route_infer.response}} != null",
							"next": "generate_cross_page_case"
						}
					],
					"default": "wait_for_evaluation"
				}
			},

			"match_viewpoints": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/match_viewpoints/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"clean_json_cache_id": "{{#if process_selected_frames.response.cache_id}}{{process_selected_frames.response.cache_id}}{{else}}{{load_page.response.cache_id}}{{/if}}",
						"viewpoints_processed": "{{process_viewpoints.response.viewpoints}}",
						"selected_frames": "{{#if selected_frames}}{{selected_frames}}{{else}}null{{/if}}"
					}
				},
				"next": "create_semantic_correlation_map"
			},

			"create_semantic_correlation_map": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/create_semantic_correlation_map/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"figma_data_cache_id": "{{#if process_selected_frames.response.cache_id}}{{process_selected_frames.response.cache_id}}{{else}}{{load_page.response.cache_id}}{{/if}}",
						"viewpoints_cache_id": "{{process_viewpoints.response.cache_id}}",
						"historical_patterns_cache_id": "{{#if extract_test_patterns.response}}{{extract_test_patterns.response.cache_id}}{{else}}null{{/if}}",
						"agent_config": {
							"provider": "anthropic",
							"model": "claude-3-sonnet",
							"temperature": 0.1
						}
					}
				},
				"next": "generate_testcases"
			},

			"generate_testcases": {
				"type": "http",
				"priority": "medium",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/generate_testcases/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"component_viewpoints_cache_id": "{{match_viewpoints.response.cache_id}}",
						"semantic_correlation_map_cache_id": "{{create_semantic_correlation_map.response.cache_id}}",
						"agent_config": {
							"provider": "openai",
							"api_key": "{{api_key}}",
							"model": "gpt-4o",
							"temperature": 0.3
						},
						"parallel": true,
						"max_workers": 4
					}
				},
				"next": "wait_for_parallel"
			},

			"route_infer": {
				"type": "http",
				"priority": "high",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/route_infer/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"clean_json_cache_id": "{{#if process_selected_frames.response.cache_id}}{{process_selected_frames.response.cache_id}}{{else}}{{load_page.response.cache_id}}{{/if}}"
					}
				},
				"next": "wait_for_parallel"
			},

			"wait_for_parallel": {
				"type": "condition",
				"priority": "high",
				"data": {
					"conditions": [
						{
							"condition": "{{generate_testcases.response}} != null && {{route_infer.response}} != null && ({{history_cases_files.length}} == 0 || {{evaluate_coverage.response}} != null)",
							"next": "generate_cross_page_case"
						}
					],
					"default": "wait_for_parallel"
				}
			},

			"generate_cross_page_case": {
				"type": "http",
				"priority": "medium",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/generate_cross_page_case/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"routes_cache_id": "{{route_infer.response.cache_id}}",
						"testcases_cache_id": "{{generate_testcases.response.cache_id}}",
						"agent_config": {
							"provider": "openai",
							"api_key": "{{api_key}}",
							"model": "gpt-4o",
							"temperature": 0.2
						}
					}
				},
				"next": [
					"format_output",
					"show_viewpoints_analysis",
					"show_coverage_analysis"
				]
			},

			"format_output": {
				"type": "http",
				"priority": "low",
				"data": {
					"method": "POST",
					"url": "http://host.docker.internal:8000/run_node/format_output/",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"testcases": "{{generate_cross_page_case.response.content}}",
						"format": "markdown"
					}
				},
				"next": "show_result"
			},

			"show_result": {
				"type": "output",
				"priority": "low",
				"data": {
					"title": "结构化测试用例输出（Markdown）",
					"description": "以下是从Figma自动生成的结构化测试用例",
					"display_type": "markdown",
					"content": "{{format_output.response.content}}"
				}
			},

			"show_viewpoints_analysis": {
				"type": "output",
				"priority": "low",
				"data": {
					"title": "测试观点分析结果",
					"description": "测试观点的优先级和分类分析结果",
					"display_type": "json",
					"content": "{{process_viewpoints.response.metadata}}"
				}
			},

			"show_coverage_analysis": {
				"type": "output",
				"priority": "low",
				"data": {
					"title": "覆盖率评估结果",
					"description": "基于历史测试用例的覆盖率评估结果",
					"display_type": "json",
					"content": "{{#if evaluate_coverage.response}}{{evaluate_coverage.response.coverage_report}}{{else}}无覆盖率评估数据{{/if}}"
				}
			}
		}
	}
}
